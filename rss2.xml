<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Myongchon的博客</title>
    <link>https://Myongchon.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Giser转型中</description>
    <pubDate>Sat, 31 Aug 2019 17:20:20 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>”js实现轮播图“</title>
      <link>https://Myongchon.github.io/2019/08/31/%E2%80%9Djs%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE%E2%80%9C/</link>
      <guid>https://Myongchon.github.io/2019/08/31/%E2%80%9Djs%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE%E2%80%9C/</guid>
      <pubDate>Sat, 31 Aug 2019 15:57:09 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;本文部分参考&lt;a href=&quot;https://www.jianshu.com/p/25e6011c92c9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;手把手原生js简单轮播图&lt;/a&gt;&lt;br&gt;&lt;strong&gt;轮播图的原理：&lt;/strong&gt;&lt;/p&gt;
&lt;p
        
      
      </description>
      
      <content:encoded><![CDATA[<p>本文部分参考<a href="https://www.jianshu.com/p/25e6011c92c9" target="_blank" rel="noopener">手把手原生js简单轮播图</a><br><strong>轮播图的原理：</strong></p><p>一系列的大小相等的图片平铺，利用CSS布局只显示一张图片，其余隐藏。通过计算偏移量利用定时器实现自动播放，或通过手动点击事件切换图片。</p><p><img src="https://upload-images.jianshu.io/upload_images/3992113-6779eebc4231139b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/618/format/webp" alt></p><p></p><p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="js,result" data-user="myongchon" data-slug-hash="MWgvVNj" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="轮播图"><br><span>See the Pen <a href="https://codepen.io/myongchon/pen/MWgvVNj/" target="_blank" rel="noopener"><br>轮播图</a> by Myongchon_Lau (<a href="https://codepen.io/myongchon" target="_blank" rel="noopener">@myongchon</a>)<br>on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span><br></p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><ul><li>相关阅读<blockquote><p><a href="https://www.jianshu.com/p/56fb1513a28a" target="_blank" rel="noopener">Vue轮播图的实现以及其与jQuery轮播图的简单对比</a></p></blockquote></li></ul>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/08/31/%E2%80%9Djs%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE%E2%80%9C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Vue仿百度搜索功能</title>
      <link>https://Myongchon.github.io/2019/08/23/vue%E4%BB%BF%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</link>
      <guid>https://Myongchon.github.io/2019/08/23/vue%E4%BB%BF%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</guid>
      <pubDate>Fri, 23 Aug 2019 14:22:48 GMT</pubDate>
      <description>
      
        
        
          &lt;ul&gt;
&lt;li&gt;所用知识&lt;br&gt;&lt;strong&gt;1. 样式：bootstrap&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2. 常见：vue-resource.js(ajax库)，实现跨域请求&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;html代码&lt;/p&gt;
&lt;figure cla
        
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>所用知识<br><strong>1. 样式：bootstrap</strong><br><strong>2. 常见：vue-resource.js(ajax库)，实现跨域请求</strong></li><li><p>html代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;container search-container&quot; id=&quot;app&quot;&gt;</span><br><span class="line">&lt;h1 class=&quot;title&quot; &gt;baidu-search&lt;/h1&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;请输入想要搜索关键字&quot; v-model=&quot;keyword&quot; @keyup=&quot;get($event)&quot; @keydown.down.prevent=&quot;selectDown&quot;</span><br><span class="line">@keydown.up.prevent=&quot;selectUp&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li class=&quot;text-center&quot; v-for=&quot;(value,index) in myData&quot;&gt;&lt;span class=&quot;text-success textprimary&quot; :class=&quot;&#123;gray:index==now&#125;&quot;&gt;&#123;&#123;value&#125;&#125;&lt;/span&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;p &gt;&lt;h2 v-show=&quot;myData.length==0&quot; class=&quot;text-warning text-center&quot;&gt;暂时无数据&lt;/h2&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>js代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">el:&apos;#app&apos;,</span><br><span class="line">data:&#123;</span><br><span class="line">myData:[],</span><br><span class="line">keyword:&apos;&apos;,</span><br><span class="line">now:-1</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">get:function (event) &#123;</span><br><span class="line">if(event.keyCode==38||event.keyCode==40)return;</span><br><span class="line">if(event.keyCode==13)&#123;</span><br><span class="line">window.open(&apos;https://www.baidu.com/s?wd=&apos;+this.keyword);</span><br><span class="line">this.keyword=&apos;&apos;</span><br><span class="line">&#125;</span><br><span class="line">this.$http.jsonp(&apos;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su&apos;,&#123;</span><br><span class="line">wd:this.keyword</span><br><span class="line">&#125;,&#123;</span><br><span class="line">jsonp:&apos;cb&apos;</span><br><span class="line">&#125;).then(function (res) &#123;</span><br><span class="line">this.myData=res.data.s;</span><br><span class="line">&#125;,function () &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">selectDown:function () &#123;</span><br><span class="line">this.now++;</span><br><span class="line">if(this.now==this.myData.length)this.now=-1;</span><br><span class="line">this.keyword=this.myData[this.now];</span><br><span class="line">&#125;,</span><br><span class="line">selectUp:function () &#123;</span><br><span class="line">this.now--;</span><br><span class="line">if(this.now==-2)this.now=this.myData.length-1;</span><br><span class="line">this.keyword=this.myData[this.now];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>get方法实现获取下拉数据和搜索功能，输入keyword之后，调用get方法使用jsonp获取提示数据，然后赋值给myData，然后使用v-for遍历提示数据</p><p><img src="https://upload-images.jianshu.io/upload_images/16749538-19d4e4de5ba1762b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="提示数据"></p><p>然后selectDown和selectUp实现上下选中数据，当按下回车键时，实现搜索</p><ul><li>实现效果<br><p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="result" data-user="myongchon" data-slug-hash="KKPaxob" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="仿百度搜索"><br><span>See the Pen <a href="https://codepen.io/myongchon/pen/KKPaxob/" target="_blank" rel="noopener"></a></span></p></li></ul>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/08/23/vue%E4%BB%BF%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaScript执行机制</title>
      <link>https://Myongchon.github.io/2019/08/13/JavaScript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</link>
      <guid>https://Myongchon.github.io/2019/08/13/JavaScript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</guid>
      <pubDate>Tue, 13 Aug 2019 14:20:57 GMT</pubDate>
      <description>
      
        
        
          &lt;h6 id=&quot;1、场景分析&quot;&gt;&lt;a href=&quot;#1、场景分析&quot; class=&quot;headerlink&quot; title=&quot;1、场景分析&quot;&gt;&lt;/a&gt;1、场景分析&lt;/h6&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id
        
      
      </description>
      
      <content:encoded><![CDATA[<h6 id="1、场景分析"><a href="#1、场景分析" class="headerlink" title="1、场景分析"></a>1、场景分析</h6><p></p><p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="js,result" data-user="myongchon" data-slug-hash="abodVQw" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="abodVQw"><br><span>See the Pen <a href="https://codepen.io/myongchon/pen/abodVQw/" target="_blank" rel="noopener"><br>abodVQw</a> by Myongchon_Lau (<a href="https://codepen.io/myongchon" target="_blank" rel="noopener">@myongchon</a>)<br>on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span><br></p><p></p><p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></p><ul><li>执行结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//&quot;执行Promise&quot;</span><br><span class="line">//&quot;代码执行结束&quot;</span><br><span class="line">//&quot;执行then函数啦&quot;</span><br><span class="line">//&quot;定时器开始&quot;</span><br></pre></td></tr></table></figure></li></ul><h6 id="2、执行机制相关知识点"><a href="#2、执行机制相关知识点" class="headerlink" title="2、执行机制相关知识点"></a>2、执行机制相关知识点</h6><h6 id="2-1、关于javascript"><a href="#2-1、关于javascript" class="headerlink" title="2.1、关于javascript"></a>2.1、关于javascript</h6><blockquote><p>javascript是一门单线程语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的”多线程”都是用单线程模拟出来的。</p></blockquote><h6 id="2-2、javascript的同步和异步"><a href="#2-2、javascript的同步和异步" class="headerlink" title="2.2、javascript的同步和异步"></a>2.2、javascript的同步和异步</h6><blockquote><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br>如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。<br>JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。<br>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p></blockquote><p><img src="/2019/08/13/JavaScript执行机制/15fdd88994142347" alt="同步任务和异步任务"></p><blockquote><p>1、同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。<br>2、当Event Table中指定的事情完成时，会将这个函数移入Event Queue。<br>3、主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。<br>4、上述过程会不断重复，也就是常说的Event Loop(事件循环)。<br>5、我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</p></blockquote><h6 id="2-3、JavaScript的宏任务与微任务"><a href="#2-3、JavaScript的宏任务与微任务" class="headerlink" title="2.3、JavaScript的宏任务与微任务"></a>2.3、JavaScript的宏任务与微任务</h6><blockquote><p>你是否觉得同步异步的执行机制流程就是JavaScript执行机制的全部？不是的，JavaScript除了广义上的的同步任务何异步任务，其对任务还有更精细的定义：<br>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval<br>micro-task(微任务)：Promise，process.nextTick<br>不同类型的任务会进入对应的Event Queue。<br>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。</p></blockquote><p><img src="/2019/08/13/JavaScript执行机制/12738399-2f2b5012410401b4.webp" alt="宏任务与微任务"></p>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/08/13/JavaScript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>变量提升</title>
      <link>https://Myongchon.github.io/2019/08/01/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</link>
      <guid>https://Myongchon.github.io/2019/08/01/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</guid>
      <pubDate>Thu, 01 Aug 2019 14:28:27 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;在ECMAScript5中，JS只有两类作用域：&lt;code&gt;全局作用域、函数作用域&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局作用域：全局对象的作用域，在代码的任何地方都可访问，但有时会被函数作用域覆盖&lt;/li&gt;
&lt;li&gt;函数作用域：作用于整个函数范围内，不管到底是在函
        
      
      </description>
      
      <content:encoded><![CDATA[<p>在ECMAScript5中，JS只有两类作用域：<code>全局作用域、函数作用域</code>。</p><ul><li>全局作用域：全局对象的作用域，在代码的任何地方都可访问，但有时会被函数作用域覆盖</li><li>函数作用域：作用于整个函数范围内，不管到底是在函数中的何处进行声明</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 全局变量</span><br><span class="line">var i = 100;</span><br><span class="line">// 函数声明，outer是一个外部函数</span><br><span class="line">function outer()&#123;</span><br><span class="line">// 访问全局变量</span><br><span class="line">console.log(i);  // 100</span><br><span class="line">// 函数声明，inner是一个内部函数</span><br><span class="line">function inner()&#123;</span><br><span class="line">// 内部函数的内部进行了变量提升，也就是第二部分叙述的内容</span><br><span class="line">console.log(i);  // undefined</span><br><span class="line">// 这里的i是局部变量，作用域仅在函数内</span><br><span class="line">var i = 1;</span><br><span class="line">// 局部变量覆盖全局变量，或者说是函数作用域覆盖全局作用域</span><br><span class="line">console.log(i);  // 1</span><br><span class="line">&#125;</span><br><span class="line">inner();</span><br><span class="line">// 这里的i是全局变量</span><br><span class="line">console.log(i);  // 100</span><br><span class="line">&#125;</span><br><span class="line">outer();</span><br></pre></td></tr></table></figure><p>定义变量时，如果不写<code>var</code>，那么就会相当于声明了一个全局变量，作用域为全局作用域；否则声明的是局部变量，作用域为函数作用域。在以上代码段中，第一行的<code>var i = 0</code>是全局变量，虽然它添加<code>var</code>，但是在全局范畴中声明，而且不在函数范围内，因此效果等同于<code>i = 0</code>。但是在JS编程中应该尽力避免不加<code>var</code>，即使真的需要全局变量，也应该在最外层作用域中使用<code>var</code>声明。</p><p>##<strong>变量提升的概念</strong></p><p>变量提升的概念：<br>当栈内存（作用域）形成，JS 代码自上而下执行之前，浏览器首先会把所有带 <code>var / function</code> 关键字开头的进行提前声明或者定义，这种预先处理机制称为“变量提升”。</p><blockquote><p>声明（declare）：<code>var a</code> （默认 <code>undefined</code>）<br>定义（defined）：<code>a = 12</code>（定义其实就是赋值操作）</p></blockquote><p>变量提升阶段：</p><ul><li>带 <code>var</code> 是只提升声明未定义（给个默认值 <code>undefined</code>）</li><li>带 <code>function</code> 是提升声明和定义都完成了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log(a); //=&gt; undefined，如果后面都没有声明，那么就会报错</span><br><span class="line">var a = 12;</span><br><span class="line"></span><br><span class="line">b(); //=&gt; 1，可以直接使用，如果后面没有定义，那么会报错</span><br><span class="line">function b() &#123;</span><br><span class="line">console.log(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为用 <code>function</code> 关键字声明的函数 ，在变量提升阶段已经赋好值了，所以我们可以在 JS 文件中的任意位置调用这个函数</p></blockquote><p><strong>变量的声明会被自动移到函数或者全局代码的最顶上。移动的仅仅是<code>declarations</code>，变量的定义并不会随之提升，如下代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var date = new Date();</span><br><span class="line">function fn()&#123;</span><br><span class="line">console.log(date);</span><br><span class="line">if(true)&#123;</span><br><span class="line">var date = &apos;hello&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></p><p>结果并不是date的toString方法返回的结果，而是undefined，因为以上代码等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 变量声明提升</span><br><span class="line">var date;</span><br><span class="line">date = new Date();</span><br><span class="line">function fn()&#123;</span><br><span class="line">// 变量声明提升，但是此时未定义变量的值</span><br><span class="line">var date;</span><br><span class="line">console.log(date);</span><br><span class="line">if(true)&#123;</span><br><span class="line">date = &quot;hello&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></p><p>但是在变量提升中还存在着一些特殊情况，因为在ES5中，变量声明、函数声明都会被提升，这就衍生出很多值得辨析的问题。</p><p><em>在ES6中，`function </em>, let, class, const`也会被提升，但是提升机制又与变量提升、函数提升有所区别*</p><p>###四大原则</p><ul><li>所有声明都会被提升到对应作用域的顶上</li><li>同一个变量声明只进行一次，其他重复声明会被JS解析忽略</li><li>函数声明进行提升时会连带函数定义一起提升</li><li>遵循前三项原则多多动手写等价转换，就一定不会出错</li></ul>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/08/01/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在Hexo文章中嵌入CodePen</title>
      <link>https://Myongchon.github.io/2019/07/27/%E5%9C%A8Hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E5%B5%8C%E5%85%A5CodePen/</link>
      <guid>https://Myongchon.github.io/2019/07/27/%E5%9C%A8Hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E5%B5%8C%E5%85%A5CodePen/</guid>
      <pubDate>Sat, 27 Jul 2019 15:01:24 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;在文章中嵌入-CodePen&quot;&gt;&lt;a href=&quot;#在文章中嵌入-CodePen&quot; class=&quot;headerlink&quot; title=&quot;在文章中嵌入 CodePen&quot;&gt;&lt;/a&gt;在文章中嵌入 CodePen&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:/
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="在文章中嵌入-CodePen"><a href="#在文章中嵌入-CodePen" class="headerlink" title="在文章中嵌入 CodePen"></a>在文章中嵌入 CodePen</h2><ul><li><a href="https://hexo.io/plugins/" target="_blank" rel="noopener">Hexo 官方插件页</a>搜索<code>codepen</code>，然后找到<code>hexo-codepen</code></li><li>或直接<a href="https://github.com/maliMirkec/hexo-tag-codepen" target="_blank" rel="noopener">点击此处</a></li></ul><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>npm 安装：<br><code>$ npm install hexo-codepen --save</code><br>或 yarn 安装：<br><code>$ yarn add hexo-codepen</code></p><h3 id="2-用法"><a href="#2-用法" class="headerlink" title="2.用法"></a>2.用法</h3><p>语法结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codepen userId|anonymous|anon slugHash theme [defaultTab [height [width]]] %&#125;</span><br></pre></td></tr></table></figure><p>demo：</p><p><code>https://codepen.io/CiTA/pen/bgjKKE</code></p><p>在 CodePen 里面 Embed 出来的html代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p data-height=&quot;265&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;bgjKKE&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;CiTA&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS sidebar toggle&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/CiTA/pen/bgjKKE/&quot;&gt;CSS sidebar toggle&lt;/a&gt; by Silvestar Bistrović (&lt;a href=&quot;https://codepen.io/CiTA&quot;&gt;@CiTA&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">&lt;script async src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>参数对应关系：</p><table><thead><tr><th>字段</th><th>值</th></tr></thead><tbody><tr><td>userId</td><td>CiTA</td></tr><tr><td>slugHash</td><td>bgjKKE</td></tr><tr><td>theme</td><td>dark</td></tr><tr><td>defaultTab</td><td>css,result</td></tr><tr><td>height</td><td>265</td></tr><tr><td>width</td><td>默认为：100%，此值根据博客主题进行调整</td></tr></tbody></table><p>示例效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#替换参数后的语法：(*设置宽高时不要用%，会导致编译错误*)</span><br><span class="line">&#123;% codepen CiTA bgjKKE dark [css,result [265]] %&#125;</span><br></pre></td></tr></table></figure><p>运行后：<br><iframe id="cp_embed_bgjKKE" src="//codepen.io/CiTA/embed/bgjKKE?height=[265]]&theme-id=dark&slug-hash=bgjKKE&default-tab=[css,result" scrolling="no" frameborder="no" height="[265]]" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><p>直接嵌入源码（CodePen 中 Embed 出来的代码支持3种格式：WordPress Shortcode、iFrame、HTML）<br>效果如下：</p><p></p><p data-height="265" data-theme-id="dark" data-slug-hash="bgjKKE" data-default-tab="css,result" data-user="CiTA" data-embed-version="2" data-pen-title="CSS sidebar toggle" class="codepen">See the Pen <a href="https://codepen.io/CiTA/pen/bgjKKE/" target="_blank" rel="noopener">CSS sidebar toggle</a> by Silvestar Bistrović (<a href="https://codepen.io/CiTA" target="_blank" rel="noopener">@CiTA</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/27/%E5%9C%A8Hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E5%B5%8C%E5%85%A5CodePen/#disqus_thread</comments>
    </item>
    
    <item>
      <title>防抖和节流</title>
      <link>https://Myongchon.github.io/2019/07/14/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</link>
      <guid>https://Myongchon.github.io/2019/07/14/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</guid>
      <pubDate>Sat, 13 Jul 2019 18:40:49 GMT</pubDate>
      <description>
      
        
        
          &lt;ul&gt;
&lt;li&gt;防抖&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;实现方式：每次触发事件时设置一个延迟调用方法，并且
        
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>防抖</li></ul><blockquote><p>触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</p></blockquote><blockquote><p>实现方式：每次触发事件时设置一个延迟调用方法，并且取消之前的延时调用方法<br>缺点：如果事件在规定的时间间隔内被不断的触发，则调用方法会被不断的延迟<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//防抖debounce代码：</span><br><span class="line">function debounce(fn) &#123;</span><br><span class="line">let timeout = null; // 创建一个标记用来存放定时器的返回值</span><br><span class="line">return function () &#123;</span><br><span class="line">// 每当用户输入的时候把前一个 setTimeout clear 掉</span><br><span class="line">clearTimeout(timeout); </span><br><span class="line">// 然后又创建一个新的 setTimeout, 这样就能保证interval 间隔内如果时间持续触发，就不会执行 fn 函数</span><br><span class="line">timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">fn.apply(this, arguments);</span><br><span class="line">&#125;, 500);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">// 处理函数</span><br><span class="line">function handle() &#123;</span><br><span class="line">console.log(Math.random());</span><br><span class="line">&#125;</span><br><span class="line">// 滚动事件</span><br><span class="line">window.addEventListener(&apos;scroll&apos;, debounce(handle));</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>节流</li></ul><blockquote><p>高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</p></blockquote><blockquote><p>实现方式：每次触发事件时，如果当前有等待执行的延时函数，则直接return<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//节流throttle代码：</span><br><span class="line">function throttle(fn) &#123;</span><br><span class="line">let canRun = true; // 通过闭包保存一个标记</span><br><span class="line">return function () &#123;</span><br><span class="line">// 在函数开头判断标记是否为true，不为true则return</span><br><span class="line">if (!canRun) return;</span><br><span class="line">// 立即设置为false</span><br><span class="line">canRun = false;</span><br><span class="line">// 将外部传入的函数的执行放在setTimeout中</span><br><span class="line">setTimeout(() =&gt; &#123; </span><br><span class="line">// 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。</span><br><span class="line">// 当定时器没有执行的时候标记永远是false，在开头被return掉</span><br><span class="line">fn.apply(this, arguments);</span><br><span class="line">canRun = true;</span><br><span class="line">&#125;, 500);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sayHi(e) &#123;</span><br><span class="line">console.log(e.target.innerWidth, e.target.innerHeight);</span><br><span class="line">&#125;</span><br><span class="line">window.addEventListener(&apos;resize&apos;, throttle(sayHi));</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>总结：</strong></p><blockquote><ul><li>函数防抖：将多次操作合并为一次操作进行。原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。</li><li>函数节流：使得一定时间内只触发一次函数。原理是通过判断是否有延迟调用函数未执行。</li></ul></blockquote><p><em>区别： 函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数，而函数防抖只是在最后一次事件后才触发一次函数。 比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。</em></p>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/14/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/#disqus_thread</comments>
    </item>
    
    <item>
      <title>跨域请求</title>
      <link>https://Myongchon.github.io/2019/07/14/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</link>
      <guid>https://Myongchon.github.io/2019/07/14/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</guid>
      <pubDate>Sat, 13 Jul 2019 18:33:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;一、什么是跨域？&lt;br&gt;1.什么是同源策略及其限制内容？&lt;br&gt;同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<p>一、什么是跨域？<br>1.什么是同源策略及其限制内容？<br>同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p>url的组成</p><p>同源策略限制内容有：</p><p>Cookie、LocalStorage、IndexedDB 等存储性内容<br>DOM 节点<br>AJAX 请求发送后，结果被浏览器拦截了</p><p>但是有三个标签是允许跨域加载资源：</p><p><img src="/2019/07/14/跨域请求/XXX"></p><p><link href="XXX"></p><script src="XXX"><p>2.常见跨域场景<br>当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。不同域之间相互请求资源，就算作“跨域”。常见跨域场景如下图所示：</p><p>image</p><p>特别说明两点：<br>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。<br>第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”。<br>这里你或许有个疑问：请求跨域了，那么请求到底发出去没有？<br>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p></script>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/14/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/#disqus_thread</comments>
    </item>
    
    <item>
      <title>vue-leaflet实践(1)</title>
      <link>https://Myongchon.github.io/2019/07/14/vue-leaflet%E5%AE%9E%E8%B7%B5(1)/</link>
      <guid>https://Myongchon.github.io/2019/07/14/vue-leaflet%E5%AE%9E%E8%B7%B5(1)/</guid>
      <pubDate>Sat, 13 Jul 2019 18:33:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;单文件组件结构&quot;&gt;&lt;a href=&quot;#单文件组件结构&quot; class=&quot;headerlink&quot; title=&quot;单文件组件结构&quot;&gt;&lt;/a&gt;单文件组件结构&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;命名：xx.vue&lt;br&gt;位置：位于pages文件夹下&lt;br&gt;一般来说，我
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="单文件组件结构"><a href="#单文件组件结构" class="headerlink" title="单文件组件结构"></a>单文件组件结构</h3><blockquote><p>命名：xx.vue<br>位置：位于pages文件夹下<br>一般来说，我们需要在单文件组件结构中定义那么几个标签</p></blockquote><p><img src="/2019/07/14/vue-leaflet实践(1)/vue-leaflet实践(1" alt="单组件文件内容">/8787263-6fb2238c101d48a7.webp)</p><ul><li>##地图显示功能<br>1.全局安装vue<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure></li></ul><p>2.创建项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack vue_leaflet</span><br></pre></td></tr></table></figure></p><p>3.进入项目中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vue_leaflet</span><br><span class="line">npm start   //http://localhost:8080测试</span><br></pre></td></tr></table></figure></p><p>4.安装leaflet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install leaflet --save</span><br></pre></td></tr></table></figure></p><p><strong>index.html</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br><span class="line">&lt;link href=&quot;//netdna.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.3.4/dist/leaflet.css&quot;/&gt;</span><br><span class="line">&lt;title&gt;test_bus_station&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/leaflet@1.3.4/dist/leaflet.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p><strong>单文件（.vue）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div id=&quot;mapid&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/leaflet@1.3.4/dist/leaflet.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name: &apos;BusStation&apos;,</span><br><span class="line">data () &#123;</span><br><span class="line">return &#123;</span><br><span class="line">map: null</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted () &#123;</span><br><span class="line">this.map = L.map(&apos;mapid&apos;).setView([36.49771311230842, 109.45744048529967], 13)</span><br><span class="line">// 加载谷歌地图</span><br><span class="line">L.tileLayer(&apos;http://mt0.google.cn/vt/lyrs=m@160000000&amp;hl=zh-CN&amp;gl=CN&amp;src=app&amp;y=&#123;y&#125;&amp;x=&#123;x&#125;&amp;z=&#123;z&#125;&amp;s=Ga&apos;, &#123;</span><br><span class="line">attribution: &apos;© &lt;a href=&quot;http://osm.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&apos;</span><br><span class="line">&#125;).addTo(this.map)</span><br><span class="line">// 加载高德地图</span><br><span class="line">// L.tileLayer(&apos;http://webrd0&#123;s&#125;.is.autonavi.com/appmaptile?x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&amp;lang=zh_cn&amp;size=1&amp;scale=1&amp;style=8&apos;, &#123;</span><br><span class="line">//   subdomains:&quot;1234&quot;</span><br><span class="line">// &#125;).addTo(this.map)&lt;br&gt;&lt;br&gt;    // 在地图上添加标记&lt;br&gt;    L.marker([data.lat, data.lng]).addTo(this.map)&lt;br&gt;    // 在地图上画圆圈&lt;br&gt;     L.circle([data.lat, data.lng], &#123;&lt;br&gt;           color: &apos;red&apos;,&lt;br&gt;           fillColor: &apos;#f03&apos;,&lt;br&gt;           fillOpacity: 0.5,&lt;br&gt;           radius: 3&lt;br&gt;        &#125;).addTo(this.map)&lt;br&gt;     &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#mapid &#123; height: 1080px; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/07/14/vue-leaflet实践(1)/vue-leaflet实践(1" alt="显示效果">/16749538-a08a252cf1f5542e.png)</p>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/14/vue-leaflet%E5%AE%9E%E8%B7%B5(1)/#disqus_thread</comments>
    </item>
    
    <item>
      <title>编码与解码</title>
      <link>https://Myongchon.github.io/2019/07/14/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</link>
      <guid>https://Myongchon.github.io/2019/07/14/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</guid>
      <pubDate>Sat, 13 Jul 2019 18:33:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;编码函数：escape,encodeURI,encodeURIComponent&lt;br&gt;解码函数：unescape,decodeURI,decodeURIComponent&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##实例&lt;/p&gt;
&lt;h4 id=&quot;1、escape&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<p><strong>编码函数：escape,encodeURI,encodeURIComponent<br>解码函数：unescape,decodeURI,decodeURIComponent</strong></p><p>##实例</p><h4 id="1、escape"><a href="#1、escape" class="headerlink" title="1、escape()"></a>1、escape()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  document.write(escape(&quot;Visit W3School!&quot;) + &quot;&lt;br /&gt;&quot;)</span><br><span class="line">  document.write(escape(&quot;?!=()#%&amp;&quot;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出结果：</span><br><span class="line">Visit%20W3School%21</span><br><span class="line">%3F%21%3D%28%29%23%25%26</span><br></pre></td></tr></table></figure><h4 id="2、encodeURI"><a href="#2、encodeURI" class="headerlink" title="2、encodeURI()"></a>2、encodeURI()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">document.write(encodeURI(&quot;http://www.w3school.com.cn&quot;)+ &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(encodeURI(&quot;http://www.w3school.com.cn/My first/&quot;)+ &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(encodeURI(&quot;,/?:@&amp;=+$#&quot;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">输出结果：</span><br><span class="line">http://www.w3school.com.cn</span><br><span class="line">http://www.w3school.com.cn/My%20first/</span><br><span class="line">,/?:@&amp;=+$#</span><br><span class="line">对整个URL进行编码，而URL的特定标识符不会被转码。</span><br></pre></td></tr></table></figure><h4 id="3、encodeURIComponent"><a href="#3、encodeURIComponent" class="headerlink" title="3、encodeURIComponent()"></a>3、encodeURIComponent()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">document.write(encodeURIComponent(&quot;http://www.w3school.com.cn&quot;))</span><br><span class="line">document.write(&quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(encodeURIComponent(&quot;http://www.w3school.com.cn/p 1/&quot;))</span><br><span class="line">document.write(&quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(encodeURIComponent(&quot;,/?:@&amp;=+$#&quot;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出结果：</span><br><span class="line">http%3A%2F%2Fwww.w3school.com.cn</span><br><span class="line">http%3A%2F%2Fwww.w3school.com.cn%2Fp%201%2F</span><br><span class="line">%2C%2F%3F%3A%40%26%3D%2B%24%23</span><br><span class="line">对URL中的参数进行编码，因为参数也是一个URL，如果不编码会影响整个URL的跳转。</span><br></pre></td></tr></table></figure><h4 id="4、unescape"><a href="#4、unescape" class="headerlink" title="4、unescape()"></a>4、unescape()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var test1=&quot;Visit W3School!&quot;</span><br><span class="line">test1=escape(test1)</span><br><span class="line">document.write (test1 + &quot;&lt;br /&gt;&quot;)</span><br><span class="line">test1=unescape(test1)</span><br><span class="line">document.write(test1 + &quot;&lt;br /&gt;&quot;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出：</span><br><span class="line">Visit%20W3School%21</span><br><span class="line">Visit W3School!</span><br></pre></td></tr></table></figure><p>###5、decodeURI()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var test1=&quot;http://www.w3school.com.cn/My first/&quot;</span><br><span class="line">document.write(encodeURI(test1)+ &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(decodeURI(test1))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出：</span><br><span class="line">http://www.w3school.com.cn/My%20first/</span><br><span class="line">http://www.w3school.com.cn/My first/</span><br></pre></td></tr></table></figure></p><p>###5、decodeURIComponent()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var test1=&quot;http://www.w3school.com.cn/My first/&quot;</span><br><span class="line">document.write(encodeURIComponent(test1)+ &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(decodeURIComponent(test1))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出：</span><br><span class="line">http%3A%2F%2Fwww.w3school.com.cn%2FMy%20first%2F</span><br><span class="line">http://www.w3school.com.cn/My first/</span><br></pre></td></tr></table></figure></p><p><strong>参考：<a href="https://www.cnblogs.com/luckyuns/p/6396701.html" target="_blank" rel="noopener">js 中编码（encode）和解码（decode）的三种方法</a></strong></p><hr><p>escape()除了 ASCII 字母、数字和特定的符号外，对传进来的字符串全部进行转义编码，因此如果想对URL编码，最好不要使用此方法。而encodeURI() 用于编码整个URI,因为URI中的合法字符都不会被编码转换。encodeURIComponent方法在编码单个URIComponent（指请求参数）应当是最常用的，它可以讲参数中的中文、特殊字符进行转义，而不会影响整个URL。</p><blockquote><p>1、传递参数时需要使用encodeURIComponent，这样组合的url才不会被#等特殊字符截断。<br>例如：<script language="javascript">document.write(‘&lt;a href=”<a href="http://passport.baidu.com/?logout&amp;aid=7&amp;u=&#39;+encodeURIComponent(">http://passport.baidu.com/?logout&amp;aid=7&amp;u=’+encodeURIComponent(</a>“<a href="http://cang.baidu.com/bruce42">http://cang.baidu.com/bruce42</a>“)+’”&gt;退出</a>‘);</script></p></blockquote><blockquote><p>2、进行url跳转时可以整体使用encodeURI<br>例如：Location.href=encodeURI(“<a href="http://cang.baidu.com/do/s?word=" target="_blank" rel="noopener">http://cang.baidu.com/do/s?word=</a>百度&amp;ct=21”);</p></blockquote><blockquote><p>3、 js使用数据时可以使用escape<br>例如：搜藏中history纪录。</p></blockquote><blockquote><p>4、escape对0-255以外的unicode值进行编码时输出%u<em>**</em>格式，其它情况下escape，encodeURI，encodeURIComponent编码结果相同。<br>最多使用的应为encodeURIComponent，它是将中文、韩文等特殊字符转换成utf-8格式的url编码，所以如果给后台传递参数需要使用encodeURIComponent时需要后台解码对utf-8支持（form中的编码方式和当前页面编码方式相同）<br>escape不编码字符有69个：<em>，+，-，.，/，@，_，0-9，a-z，A-Z<br>encodeURI不编码字符有82个：!，#，$，&amp;，’，(，)，</em>，+，,，-，.，/，:，;，=，?，@，<em>，~，0-9，a-z，A-Z<br>encodeURIComponent不编码字符有71个：!， ‘，(，)，</em>，-，.，*，~，0-9，a-z，A-Z</p></blockquote>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/14/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/#disqus_thread</comments>
    </item>
    
    <item>
      <title>根据不同的环境打包（npm run build -- xx)</title>
      <link>https://Myongchon.github.io/2019/07/14/webpack%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85/</link>
      <guid>https://Myongchon.github.io/2019/07/14/webpack%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85/</guid>
      <pubDate>Sat, 13 Jul 2019 18:33:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;1&amp;gt; build.js 文件添加&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
        
      
      </description>
      
      <content:encoded><![CDATA[<p>1&gt; build.js 文件添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.env.NODE_ENV = process.argv.splice(2)[0] == &apos;dev&apos;? &apos;develop&apos;:&apos;production&apos;</span><br></pre></td></tr></table></figure></p><p>2&gt; prod.env.js &amp; dev.env.jd 文件添加在生产或开发环境需要添加的变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP_DEBUGGER: true,</span><br><span class="line">DROP_CONSOLE: true</span><br></pre></td></tr></table></figure></p><p>3&gt; webpack.prod.conf.js 中添加判断 &amp; 配置参数<br>(1)</p><pre><code>let env = require(&apos;../config/prod.env&apos;) if (process.env.NODE_ENV == &apos;develop&apos;) {    env = require(&apos;../config/dev.env&apos;) } console.log(&quot;----&quot;); console.log(env.DROP_CONSOLE); //让打包的时候输出可配置的文件 var GenerateAssetPlugin = require(&apos;generate-asset-webpack-plugin&apos;);  var createServerConfig=function(compilation){     //  console.log(&quot;info from GenerateAssetPlugin:&quot;);     //  console.log(compilation);     let cfgJson={ApiUrl:&quot;http://10.0.0.200:18080&quot;};     return JSON.stringify(cfgJson); } new UglifyJsPlugin({    uglifyOptions: {      compress: {        warnings: false,        drop_debugger: env.DROP_DEBUGGER,        drop_console: env.DROP_CONSOLE      }   },   sourceMap: config.build.productionSourceMap,   parallel: true}),</code></pre>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/14/webpack%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
