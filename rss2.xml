<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Myongchon的博客</title>
    <link>https://Myongchon.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Giser转型中</description>
    <pubDate>Wed, 14 Aug 2019 11:57:27 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>JavaScript执行机制</title>
      <link>https://Myongchon.github.io/2019/08/13/JavaScript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</link>
      <guid>https://Myongchon.github.io/2019/08/13/JavaScript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/</guid>
      <pubDate>Tue, 13 Aug 2019 14:20:57 GMT</pubDate>
      <description>
      
        
        
          &lt;h6 id=&quot;1、场景分析&quot;&gt;&lt;a href=&quot;#1、场景分析&quot; class=&quot;headerlink&quot; title=&quot;1、场景分析&quot;&gt;&lt;/a&gt;1、场景分析&lt;/h6&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id
        
      
      </description>
      
      <content:encoded><![CDATA[<h6 id="1、场景分析"><a href="#1、场景分析" class="headerlink" title="1、场景分析"></a>1、场景分析</h6><p></p><p class="codepen" data-height="265" data-theme-id="dark" data-default-tab="js,result" data-user="myongchon" data-slug-hash="abodVQw" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="abodVQw"><br><span>See the Pen <a href="https://codepen.io/myongchon/pen/abodVQw/" target="_blank" rel="noopener"><br>abodVQw</a> by Myongchon_Lau (<a href="https://codepen.io/myongchon" target="_blank" rel="noopener">@myongchon</a>)<br>on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span><br></p><p></p><p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></p><ul><li>执行结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//&quot;执行Promise&quot;</span><br><span class="line">//&quot;代码执行结束&quot;</span><br><span class="line">//&quot;执行then函数啦&quot;</span><br><span class="line">//&quot;定时器开始&quot;</span><br></pre></td></tr></table></figure></li></ul><h6 id="2、执行机制相关知识点"><a href="#2、执行机制相关知识点" class="headerlink" title="2、执行机制相关知识点"></a>2、执行机制相关知识点</h6><h6 id="2-1、关于javascript"><a href="#2-1、关于javascript" class="headerlink" title="2.1、关于javascript"></a>2.1、关于javascript</h6><blockquote><p>javascript是一门单线程语言，在最新的HTML5中提出了Web-Worker，但javascript是单线程这一核心仍未改变。所以一切javascript版的”多线程”都是用单线程模拟出来的。</p></blockquote><h6 id="2-2、javascript的同步和异步"><a href="#2-2、javascript的同步和异步" class="headerlink" title="2.2、javascript的同步和异步"></a>2.2、javascript的同步和异步</h6><blockquote><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。<br>如果排队是因为计算量大，CPU忙不过来，倒也算了，但是很多时候CPU是闲着的，因为IO设备（输入输出设备）很慢（比如Ajax操作从网络读取数据），不得不等着结果出来，再往下执行。<br>JavaScript语言的设计者意识到，这时主线程完全可以不管IO设备，挂起处于等待中的任务，先运行排在后面的任务。等到IO设备返回了结果，再回过头，把挂起的任务继续执行下去。<br>于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有”任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p></blockquote><p><img src="/2019/08/13/JavaScript执行机制/15fdd88994142347" alt="同步任务和异步任务"></p><blockquote><p>1、同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。<br>2、当Event Table中指定的事情完成时，会将这个函数移入Event Queue。<br>3、主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。<br>4、上述过程会不断重复，也就是常说的Event Loop(事件循环)。<br>5、我们不禁要问了，那怎么知道主线程执行栈为空啊？js引擎存在monitoring process进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数。</p></blockquote><h6 id="2-3、JavaScript的宏任务与微任务"><a href="#2-3、JavaScript的宏任务与微任务" class="headerlink" title="2.3、JavaScript的宏任务与微任务"></a>2.3、JavaScript的宏任务与微任务</h6><blockquote><p>你是否觉得同步异步的执行机制流程就是JavaScript执行机制的全部？不是的，JavaScript除了广义上的的同步任务何异步任务，其对任务还有更精细的定义：<br>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval<br>micro-task(微任务)：Promise，process.nextTick<br>不同类型的任务会进入对应的Event Queue。<br>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。</p></blockquote><p><img src="/2019/08/13/JavaScript执行机制/12738399-2f2b5012410401b4.webp" alt="宏任务与微任务"></p>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/08/13/JavaScript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>变量提升</title>
      <link>https://Myongchon.github.io/2019/08/01/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</link>
      <guid>https://Myongchon.github.io/2019/08/01/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</guid>
      <pubDate>Thu, 01 Aug 2019 14:28:27 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;在ECMAScript5中，JS只有两类作用域：&lt;code&gt;全局作用域、函数作用域&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局作用域：全局对象的作用域，在代码的任何地方都可访问，但有时会被函数作用域覆盖&lt;/li&gt;
&lt;li&gt;函数作用域：作用于整个函数范围内，不管到底是在函
        
      
      </description>
      
      <content:encoded><![CDATA[<p>在ECMAScript5中，JS只有两类作用域：<code>全局作用域、函数作用域</code>。</p><ul><li>全局作用域：全局对象的作用域，在代码的任何地方都可访问，但有时会被函数作用域覆盖</li><li>函数作用域：作用于整个函数范围内，不管到底是在函数中的何处进行声明</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 全局变量</span><br><span class="line">var i = 100;</span><br><span class="line">// 函数声明，outer是一个外部函数</span><br><span class="line">function outer()&#123;</span><br><span class="line">// 访问全局变量</span><br><span class="line">console.log(i);  // 100</span><br><span class="line">// 函数声明，inner是一个内部函数</span><br><span class="line">function inner()&#123;</span><br><span class="line">// 内部函数的内部进行了变量提升，也就是第二部分叙述的内容</span><br><span class="line">console.log(i);  // undefined</span><br><span class="line">// 这里的i是局部变量，作用域仅在函数内</span><br><span class="line">var i = 1;</span><br><span class="line">// 局部变量覆盖全局变量，或者说是函数作用域覆盖全局作用域</span><br><span class="line">console.log(i);  // 1</span><br><span class="line">&#125;</span><br><span class="line">inner();</span><br><span class="line">// 这里的i是全局变量</span><br><span class="line">console.log(i);  // 100</span><br><span class="line">&#125;</span><br><span class="line">outer();</span><br></pre></td></tr></table></figure><p>定义变量时，如果不写<code>var</code>，那么就会相当于声明了一个全局变量，作用域为全局作用域；否则声明的是局部变量，作用域为函数作用域。在以上代码段中，第一行的<code>var i = 0</code>是全局变量，虽然它添加<code>var</code>，但是在全局范畴中声明，而且不在函数范围内，因此效果等同于<code>i = 0</code>。但是在JS编程中应该尽力避免不加<code>var</code>，即使真的需要全局变量，也应该在最外层作用域中使用<code>var</code>声明。</p><p>##<strong>变量提升的概念</strong></p><p>变量提升的概念：<br>当栈内存（作用域）形成，JS 代码自上而下执行之前，浏览器首先会把所有带 <code>var / function</code> 关键字开头的进行提前声明或者定义，这种预先处理机制称为“变量提升”。</p><blockquote><p>声明（declare）：<code>var a</code> （默认 <code>undefined</code>）<br>定义（defined）：<code>a = 12</code>（定义其实就是赋值操作）</p></blockquote><p>变量提升阶段：</p><ul><li>带 <code>var</code> 是只提升声明未定义（给个默认值 <code>undefined</code>）</li><li>带 <code>function</code> 是提升声明和定义都完成了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log(a); //=&gt; undefined，如果后面都没有声明，那么就会报错</span><br><span class="line">var a = 12;</span><br><span class="line"></span><br><span class="line">b(); //=&gt; 1，可以直接使用，如果后面没有定义，那么会报错</span><br><span class="line">function b() &#123;</span><br><span class="line">console.log(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为用 <code>function</code> 关键字声明的函数 ，在变量提升阶段已经赋好值了，所以我们可以在 JS 文件中的任意位置调用这个函数</p></blockquote><p><strong>变量的声明会被自动移到函数或者全局代码的最顶上。移动的仅仅是<code>declarations</code>，变量的定义并不会随之提升，如下代码：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var date = new Date();</span><br><span class="line">function fn()&#123;</span><br><span class="line">console.log(date);</span><br><span class="line">if(true)&#123;</span><br><span class="line">var date = &apos;hello&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></p><p>结果并不是date的toString方法返回的结果，而是undefined，因为以上代码等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 变量声明提升</span><br><span class="line">var date;</span><br><span class="line">date = new Date();</span><br><span class="line">function fn()&#123;</span><br><span class="line">// 变量声明提升，但是此时未定义变量的值</span><br><span class="line">var date;</span><br><span class="line">console.log(date);</span><br><span class="line">if(true)&#123;</span><br><span class="line">date = &quot;hello&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></p><p>但是在变量提升中还存在着一些特殊情况，因为在ES5中，变量声明、函数声明都会被提升，这就衍生出很多值得辨析的问题。</p><p><em>在ES6中，`function </em>, let, class, const`也会被提升，但是提升机制又与变量提升、函数提升有所区别*</p><p>###四大原则</p><ul><li>所有声明都会被提升到对应作用域的顶上</li><li>同一个变量声明只进行一次，其他重复声明会被JS解析忽略</li><li>函数声明进行提升时会连带函数定义一起提升</li><li>遵循前三项原则多多动手写等价转换，就一定不会出错</li></ul>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/08/01/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/#disqus_thread</comments>
    </item>
    
    <item>
      <title>在Hexo文章中嵌入CodePen</title>
      <link>https://Myongchon.github.io/2019/07/27/%E5%9C%A8Hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E5%B5%8C%E5%85%A5CodePen/</link>
      <guid>https://Myongchon.github.io/2019/07/27/%E5%9C%A8Hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E5%B5%8C%E5%85%A5CodePen/</guid>
      <pubDate>Sat, 27 Jul 2019 15:01:24 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;在文章中嵌入-CodePen&quot;&gt;&lt;a href=&quot;#在文章中嵌入-CodePen&quot; class=&quot;headerlink&quot; title=&quot;在文章中嵌入 CodePen&quot;&gt;&lt;/a&gt;在文章中嵌入 CodePen&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:/
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="在文章中嵌入-CodePen"><a href="#在文章中嵌入-CodePen" class="headerlink" title="在文章中嵌入 CodePen"></a>在文章中嵌入 CodePen</h2><ul><li><a href="https://hexo.io/plugins/" target="_blank" rel="noopener">Hexo 官方插件页</a>搜索<code>codepen</code>，然后找到<code>hexo-codepen</code></li><li>或直接<a href="https://github.com/maliMirkec/hexo-tag-codepen" target="_blank" rel="noopener">点击此处</a></li></ul><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>npm 安装：<br><code>$ npm install hexo-codepen --save</code><br>或 yarn 安装：<br><code>$ yarn add hexo-codepen</code></p><h3 id="2-用法"><a href="#2-用法" class="headerlink" title="2.用法"></a>2.用法</h3><p>语法结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codepen userId|anonymous|anon slugHash theme [defaultTab [height [width]]] %&#125;</span><br></pre></td></tr></table></figure><p>demo：</p><p><code>https://codepen.io/CiTA/pen/bgjKKE</code></p><p>在 CodePen 里面 Embed 出来的html代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p data-height=&quot;265&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;bgjKKE&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;CiTA&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS sidebar toggle&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/CiTA/pen/bgjKKE/&quot;&gt;CSS sidebar toggle&lt;/a&gt; by Silvestar Bistrović (&lt;a href=&quot;https://codepen.io/CiTA&quot;&gt;@CiTA&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">&lt;script async src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>参数对应关系：</p><table><thead><tr><th>字段</th><th>值</th></tr></thead><tbody><tr><td>userId</td><td>CiTA</td></tr><tr><td>slugHash</td><td>bgjKKE</td></tr><tr><td>theme</td><td>dark</td></tr><tr><td>defaultTab</td><td>css,result</td></tr><tr><td>height</td><td>265</td></tr><tr><td>width</td><td>默认为：100%，此值根据博客主题进行调整</td></tr></tbody></table><p>示例效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#替换参数后的语法：(*设置宽高时不要用%，会导致编译错误*)</span><br><span class="line">&#123;% codepen CiTA bgjKKE dark [css,result [265]] %&#125;</span><br></pre></td></tr></table></figure><p>运行后：<br><iframe id="cp_embed_bgjKKE" src="//codepen.io/CiTA/embed/bgjKKE?height=[265]]&theme-id=dark&slug-hash=bgjKKE&default-tab=[css,result" scrolling="no" frameborder="no" height="[265]]" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe></p><p>直接嵌入源码（CodePen 中 Embed 出来的代码支持3种格式：WordPress Shortcode、iFrame、HTML）<br>效果如下：</p><p></p><p data-height="265" data-theme-id="dark" data-slug-hash="bgjKKE" data-default-tab="css,result" data-user="CiTA" data-embed-version="2" data-pen-title="CSS sidebar toggle" class="codepen">See the Pen <a href="https://codepen.io/CiTA/pen/bgjKKE/" target="_blank" rel="noopener">CSS sidebar toggle</a> by Silvestar Bistrović (<a href="https://codepen.io/CiTA" target="_blank" rel="noopener">@CiTA</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/27/%E5%9C%A8Hexo%E6%96%87%E7%AB%A0%E4%B8%AD%E5%B5%8C%E5%85%A5CodePen/#disqus_thread</comments>
    </item>
    
    <item>
      <title>防抖和节流</title>
      <link>https://Myongchon.github.io/2019/07/14/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</link>
      <guid>https://Myongchon.github.io/2019/07/14/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</guid>
      <pubDate>Sat, 13 Jul 2019 18:40:49 GMT</pubDate>
      <description>
      
        
        
          &lt;ul&gt;
&lt;li&gt;防抖&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;实现方式：每次触发事件时设置一个延迟调用方法，并且
        
      
      </description>
      
      <content:encoded><![CDATA[<ul><li>防抖</li></ul><blockquote><p>触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</p></blockquote><blockquote><p>实现方式：每次触发事件时设置一个延迟调用方法，并且取消之前的延时调用方法<br>缺点：如果事件在规定的时间间隔内被不断的触发，则调用方法会被不断的延迟<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//防抖debounce代码：</span><br><span class="line">function debounce(fn) &#123;</span><br><span class="line">let timeout = null; // 创建一个标记用来存放定时器的返回值</span><br><span class="line">return function () &#123;</span><br><span class="line">// 每当用户输入的时候把前一个 setTimeout clear 掉</span><br><span class="line">clearTimeout(timeout); </span><br><span class="line">// 然后又创建一个新的 setTimeout, 这样就能保证interval 间隔内如果时间持续触发，就不会执行 fn 函数</span><br><span class="line">timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">fn.apply(this, arguments);</span><br><span class="line">&#125;, 500);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">// 处理函数</span><br><span class="line">function handle() &#123;</span><br><span class="line">console.log(Math.random());</span><br><span class="line">&#125;</span><br><span class="line">// 滚动事件</span><br><span class="line">window.addEventListener(&apos;scroll&apos;, debounce(handle));</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>节流</li></ul><blockquote><p>高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</p></blockquote><blockquote><p>实现方式：每次触发事件时，如果当前有等待执行的延时函数，则直接return<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//节流throttle代码：</span><br><span class="line">function throttle(fn) &#123;</span><br><span class="line">let canRun = true; // 通过闭包保存一个标记</span><br><span class="line">return function () &#123;</span><br><span class="line">// 在函数开头判断标记是否为true，不为true则return</span><br><span class="line">if (!canRun) return;</span><br><span class="line">// 立即设置为false</span><br><span class="line">canRun = false;</span><br><span class="line">// 将外部传入的函数的执行放在setTimeout中</span><br><span class="line">setTimeout(() =&gt; &#123; </span><br><span class="line">// 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。</span><br><span class="line">// 当定时器没有执行的时候标记永远是false，在开头被return掉</span><br><span class="line">fn.apply(this, arguments);</span><br><span class="line">canRun = true;</span><br><span class="line">&#125;, 500);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function sayHi(e) &#123;</span><br><span class="line">console.log(e.target.innerWidth, e.target.innerHeight);</span><br><span class="line">&#125;</span><br><span class="line">window.addEventListener(&apos;resize&apos;, throttle(sayHi));</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>总结：</strong></p><blockquote><ul><li>函数防抖：将多次操作合并为一次操作进行。原理是维护一个计时器，规定在delay时间后触发函数，但是在delay时间内再次触发的话，就会取消之前的计时器而重新设置。这样一来，只有最后一次操作能被触发。</li><li>函数节流：使得一定时间内只触发一次函数。原理是通过判断是否有延迟调用函数未执行。</li></ul></blockquote><p><em>区别： 函数节流不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数，而函数防抖只是在最后一次事件后才触发一次函数。 比如在页面的无限加载场景下，我们需要用户在滚动页面时，每隔一段时间发一次 Ajax 请求，而不是在用户停下滚动页面操作时才去请求数据。这样的场景，就适合用节流技术来实现。</em></p>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/14/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/#disqus_thread</comments>
    </item>
    
    <item>
      <title>跨域请求</title>
      <link>https://Myongchon.github.io/2019/07/14/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</link>
      <guid>https://Myongchon.github.io/2019/07/14/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</guid>
      <pubDate>Sat, 13 Jul 2019 18:33:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;一、什么是跨域？&lt;br&gt;1.什么是同源策略及其限制内容？&lt;br&gt;同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<p>一、什么是跨域？<br>1.什么是同源策略及其限制内容？<br>同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p>url的组成</p><p>同源策略限制内容有：</p><p>Cookie、LocalStorage、IndexedDB 等存储性内容<br>DOM 节点<br>AJAX 请求发送后，结果被浏览器拦截了</p><p>但是有三个标签是允许跨域加载资源：</p><p><img src="/2019/07/14/跨域请求/XXX"></p><p><link href="XXX"></p><script src="XXX"><p>2.常见跨域场景<br>当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。不同域之间相互请求资源，就算作“跨域”。常见跨域场景如下图所示：</p><p>image</p><p>特别说明两点：<br>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。<br>第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”。<br>这里你或许有个疑问：请求跨域了，那么请求到底发出去没有？<br>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p></script>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/14/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/#disqus_thread</comments>
    </item>
    
    <item>
      <title>用ES6定义一个react组件</title>
      <link>https://Myongchon.github.io/2019/07/14/%E7%94%A8es6%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AAreact%E7%BB%84%E4%BB%B6/</link>
      <guid>https://Myongchon.github.io/2019/07/14/%E7%94%A8es6%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AAreact%E7%BB%84%E4%BB%B6/</guid>
      <pubDate>Sat, 13 Jul 2019 18:33:19 GMT</pubDate>
      <description>
      
        
        
          &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
        
      
      </description>
      
      <content:encoded><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/react/16.4.0/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/react-dom/16.4.0/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/babel-standalone/6.26.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">            &lt;p&gt;姓名: &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;年龄: &lt;/p&gt;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">    /**</span><br><span class="line">        * es6使用class的形式来创建组件,继承React的Component类,</span><br><span class="line">        * 后面我们更多的使用这种方式来创建组件</span><br><span class="line">     */ </span><br><span class="line">    class Welcome extends React.Component &#123;</span><br><span class="line">        constructor(props) &#123;</span><br><span class="line">            super(props);</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">            return (</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;p&gt;姓名: &#123;this.props.person.name&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;年龄: &#123;this.props.person.age&#125; &lt;/p&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const person = &#123;</span><br><span class="line">        name: &apos;huruqing&apos;,</span><br><span class="line">        age: 108</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Welcome person=&#123;person&#125; /&gt;,</span><br><span class="line">        document.getElementById(&apos;root&apos;)</span><br><span class="line">    )</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/14/%E7%94%A8es6%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AAreact%E7%BB%84%E4%BB%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>编码与解码</title>
      <link>https://Myongchon.github.io/2019/07/14/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</link>
      <guid>https://Myongchon.github.io/2019/07/14/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</guid>
      <pubDate>Sat, 13 Jul 2019 18:33:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;编码函数：escape,encodeURI,encodeURIComponent&lt;br&gt;解码函数：unescape,decodeURI,decodeURIComponent&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##实例&lt;/p&gt;
&lt;h4 id=&quot;1、escape&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<p><strong>编码函数：escape,encodeURI,encodeURIComponent<br>解码函数：unescape,decodeURI,decodeURIComponent</strong></p><p>##实例</p><h4 id="1、escape"><a href="#1、escape" class="headerlink" title="1、escape()"></a>1、escape()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  document.write(escape(&quot;Visit W3School!&quot;) + &quot;&lt;br /&gt;&quot;)</span><br><span class="line">  document.write(escape(&quot;?!=()#%&amp;&quot;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出结果：</span><br><span class="line">Visit%20W3School%21</span><br><span class="line">%3F%21%3D%28%29%23%25%26</span><br></pre></td></tr></table></figure><h4 id="2、encodeURI"><a href="#2、encodeURI" class="headerlink" title="2、encodeURI()"></a>2、encodeURI()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">document.write(encodeURI(&quot;http://www.w3school.com.cn&quot;)+ &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(encodeURI(&quot;http://www.w3school.com.cn/My first/&quot;)+ &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(encodeURI(&quot;,/?:@&amp;=+$#&quot;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">输出结果：</span><br><span class="line">http://www.w3school.com.cn</span><br><span class="line">http://www.w3school.com.cn/My%20first/</span><br><span class="line">,/?:@&amp;=+$#</span><br><span class="line">对整个URL进行编码，而URL的特定标识符不会被转码。</span><br></pre></td></tr></table></figure><h4 id="3、encodeURIComponent"><a href="#3、encodeURIComponent" class="headerlink" title="3、encodeURIComponent()"></a>3、encodeURIComponent()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">document.write(encodeURIComponent(&quot;http://www.w3school.com.cn&quot;))</span><br><span class="line">document.write(&quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(encodeURIComponent(&quot;http://www.w3school.com.cn/p 1/&quot;))</span><br><span class="line">document.write(&quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(encodeURIComponent(&quot;,/?:@&amp;=+$#&quot;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出结果：</span><br><span class="line">http%3A%2F%2Fwww.w3school.com.cn</span><br><span class="line">http%3A%2F%2Fwww.w3school.com.cn%2Fp%201%2F</span><br><span class="line">%2C%2F%3F%3A%40%26%3D%2B%24%23</span><br><span class="line">对URL中的参数进行编码，因为参数也是一个URL，如果不编码会影响整个URL的跳转。</span><br></pre></td></tr></table></figure><h4 id="4、unescape"><a href="#4、unescape" class="headerlink" title="4、unescape()"></a>4、unescape()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var test1=&quot;Visit W3School!&quot;</span><br><span class="line">test1=escape(test1)</span><br><span class="line">document.write (test1 + &quot;&lt;br /&gt;&quot;)</span><br><span class="line">test1=unescape(test1)</span><br><span class="line">document.write(test1 + &quot;&lt;br /&gt;&quot;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出：</span><br><span class="line">Visit%20W3School%21</span><br><span class="line">Visit W3School!</span><br></pre></td></tr></table></figure><p>###5、decodeURI()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var test1=&quot;http://www.w3school.com.cn/My first/&quot;</span><br><span class="line">document.write(encodeURI(test1)+ &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(decodeURI(test1))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出：</span><br><span class="line">http://www.w3school.com.cn/My%20first/</span><br><span class="line">http://www.w3school.com.cn/My first/</span><br></pre></td></tr></table></figure></p><p>###5、decodeURIComponent()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var test1=&quot;http://www.w3school.com.cn/My first/&quot;</span><br><span class="line">document.write(encodeURIComponent(test1)+ &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(decodeURIComponent(test1))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出：</span><br><span class="line">http%3A%2F%2Fwww.w3school.com.cn%2FMy%20first%2F</span><br><span class="line">http://www.w3school.com.cn/My first/</span><br></pre></td></tr></table></figure></p><p><strong>参考：<a href="https://www.cnblogs.com/luckyuns/p/6396701.html" target="_blank" rel="noopener">js 中编码（encode）和解码（decode）的三种方法</a></strong></p><hr><p>escape()除了 ASCII 字母、数字和特定的符号外，对传进来的字符串全部进行转义编码，因此如果想对URL编码，最好不要使用此方法。而encodeURI() 用于编码整个URI,因为URI中的合法字符都不会被编码转换。encodeURIComponent方法在编码单个URIComponent（指请求参数）应当是最常用的，它可以讲参数中的中文、特殊字符进行转义，而不会影响整个URL。</p><blockquote><p>1、传递参数时需要使用encodeURIComponent，这样组合的url才不会被#等特殊字符截断。<br>例如：<script language="javascript">document.write(‘&lt;a href=”<a href="http://passport.baidu.com/?logout&amp;aid=7&amp;u=&#39;+encodeURIComponent(">http://passport.baidu.com/?logout&amp;aid=7&amp;u=’+encodeURIComponent(</a>“<a href="http://cang.baidu.com/bruce42">http://cang.baidu.com/bruce42</a>“)+’”&gt;退出</a>‘);</script></p></blockquote><blockquote><p>2、进行url跳转时可以整体使用encodeURI<br>例如：Location.href=encodeURI(“<a href="http://cang.baidu.com/do/s?word=" target="_blank" rel="noopener">http://cang.baidu.com/do/s?word=</a>百度&amp;ct=21”);</p></blockquote><blockquote><p>3、 js使用数据时可以使用escape<br>例如：搜藏中history纪录。</p></blockquote><blockquote><p>4、escape对0-255以外的unicode值进行编码时输出%u<em>**</em>格式，其它情况下escape，encodeURI，encodeURIComponent编码结果相同。<br>最多使用的应为encodeURIComponent，它是将中文、韩文等特殊字符转换成utf-8格式的url编码，所以如果给后台传递参数需要使用encodeURIComponent时需要后台解码对utf-8支持（form中的编码方式和当前页面编码方式相同）<br>escape不编码字符有69个：<em>，+，-，.，/，@，_，0-9，a-z，A-Z<br>encodeURI不编码字符有82个：!，#，$，&amp;，’，(，)，</em>，+，,，-，.，/，:，;，=，?，@，<em>，~，0-9，a-z，A-Z<br>encodeURIComponent不编码字符有71个：!， ‘，(，)，</em>，-，.，*，~，0-9，a-z，A-Z</p></blockquote>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/14/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/#disqus_thread</comments>
    </item>
    
    <item>
      <title>根据不同的环境打包（npm run build -- xx)</title>
      <link>https://Myongchon.github.io/2019/07/14/webpack%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85/</link>
      <guid>https://Myongchon.github.io/2019/07/14/webpack%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85/</guid>
      <pubDate>Sat, 13 Jul 2019 18:33:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;1&amp;gt; build.js 文件添加&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
        
      
      </description>
      
      <content:encoded><![CDATA[<p>1&gt; build.js 文件添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.env.NODE_ENV = process.argv.splice(2)[0] == &apos;dev&apos;? &apos;develop&apos;:&apos;production&apos;</span><br></pre></td></tr></table></figure></p><p>2&gt; prod.env.js &amp; dev.env.jd 文件添加在生产或开发环境需要添加的变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP_DEBUGGER: true,</span><br><span class="line">DROP_CONSOLE: true</span><br></pre></td></tr></table></figure></p><p>3&gt; webpack.prod.conf.js 中添加判断 &amp; 配置参数<br>(1)</p><pre><code>let env = require(&apos;../config/prod.env&apos;) if (process.env.NODE_ENV == &apos;develop&apos;) {    env = require(&apos;../config/dev.env&apos;) } console.log(&quot;----&quot;); console.log(env.DROP_CONSOLE); //让打包的时候输出可配置的文件 var GenerateAssetPlugin = require(&apos;generate-asset-webpack-plugin&apos;);  var createServerConfig=function(compilation){     //  console.log(&quot;info from GenerateAssetPlugin:&quot;);     //  console.log(compilation);     let cfgJson={ApiUrl:&quot;http://10.0.0.200:18080&quot;};     return JSON.stringify(cfgJson); } new UglifyJsPlugin({    uglifyOptions: {      compress: {        warnings: false,        drop_debugger: env.DROP_DEBUGGER,        drop_console: env.DROP_CONSOLE      }   },   sourceMap: config.build.productionSourceMap,   parallel: true}),</code></pre>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/14/webpack%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85/#disqus_thread</comments>
    </item>
    
    <item>
      <title>浏览器缓存</title>
      <link>https://Myongchon.github.io/2019/07/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</link>
      <guid>https://Myongchon.github.io/2019/07/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</guid>
      <pubDate>Sat, 13 Jul 2019 18:33:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;####Cookie&lt;br&gt;1.来源&lt;br&gt;Cookie 在计算机中是个存储在浏览器目录中的文本文件，当浏览器运行时，存储在 RAM 中发挥作用 （此种 Cookies 称作 Session Cookies），一旦用户从该网站或服务器退出，Cookie 可存储在用户本地的硬
        
      
      </description>
      
      <content:encoded><![CDATA[<p>####Cookie<br>1.来源<br>Cookie 在计算机中是个存储在浏览器目录中的文本文件，当浏览器运行时，存储在 RAM 中发挥作用 （此种 Cookies 称作 Session Cookies），一旦用户从该网站或服务器退出，Cookie 可存储在用户本地的硬盘上 （此种 Cookies 称作 Persistent Cookies）。<br>Cookie时效性：目前有些 Cookie 是临时的，有些则是持续的。临时的 Cookie 只在浏览器上保存一段规定的时间，一旦超过规定的时间，该 Cookie 就会被系统清除。<br>Cookie使用限制：Cookie 必须在 HTML 文件的内容输出之前设置；不同的浏览器 (Netscape Navigator、Internet Explorer) 对 Cookie 的处理不一致，使用时一定要考虑；客户端用户如果设置禁止 Cookie，则 Cookie 不能建立。 并且在客户端，一个浏览器能创建的 Cookie 数量最多为 300 个，并且每个不能超过 4KB，每个 Web 站点能设置的 Cookie 总数不能超过 20 个。<br><img src="https://upload-images.jianshu.io/upload_images/16749538-8019d1f17bf73238.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="执行流程"><br>1客户端会发送一个http请求到服务器端。<br>2服务器端接受客户端请求后，发送一个http响应到客户端，这个响应头，其中就包含Set-Cookie头部。<br>3在客户端发起的第二次请求（注意：如果服务器需要我们带上Cookie，我们就需要在B步骤上面拿到这个Cookie然后作为请求头一起发起第二次请求），提供给了服务器端可以用来唯一标识客户端身份的信息。这时，服务器端也就可以判断客户端是否启用了cookies。</p><p>##2.Session<br>Session是对于服务端来说的，客户端是没有Session一说的。Session是服务器在和客户端建立连接时添加客户端连接标志，最终会在服务器软件（Apache、Tomcat、JBoss）转化为一个临时Cookie发送给给客户端，当客户端第一请求时服务器会检查是否携带了这个Session（临时Cookie），如果没有则会添加Session，如果有就拿出这个Session来做相关操作。<br>由于cookie 是存在用户端，而且它本身存储的尺寸大小也有限，最关键是用户可以是可见的，并可以随意的修改，很不安全。那如何又要安全，又可以方便的全局读取信息呢？于是，这个时候，一种新的存储会话机制：session 诞生了。<br>Session 就是在一次会话中解决2次HTTP的请求的关联，让它们产生联系，让2两个页面都能读取到找个这个全局的session信息。session信息存在于服务器端，所以也就很好的解决了安全问题。</p><p>##3.Token<br>token是用户身份的验证方式，我们通常叫它：令牌。最简单的token组成:uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign(签名，由token的前几位+盐以哈希算法压缩成一定长的十六进制字符串，可以防止恶意第三方拼接token请求服务器)。还可以把不变的参数也放进token，避免多次查库。</p><p><em>Cookie和Session的区别:</em><br>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。<br>2、cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗,考虑到安全应当使用session。<br>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能,考虑到减轻服务器性能方面，应当使用cookie。<br>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/14/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://Myongchon.github.io/2019/07/14/hello-world/</link>
      <guid>https://Myongchon.github.io/2019/07/14/hello-world/</guid>
      <pubDate>Sat, 13 Jul 2019 18:33:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/07/14/hello-world/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
