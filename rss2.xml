<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Myongchon的博客</title>
    <link>https://Myongchon.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>前端code playee</description>
    <pubDate>Sun, 28 Apr 2019 08:33:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>盒子模型</title>
      <link>https://Myongchon.github.io/2019/04/28/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</link>
      <guid>https://Myongchon.github.io/2019/04/28/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</guid>
      <pubDate>Sun, 28 Apr 2019 08:30:39 GMT</pubDate>
      <description>
      
      </description>
      
      <comments>https://Myongchon.github.io/2019/04/28/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>个人主页优化</title>
      <link>https://Myongchon.github.io/2019/04/27/%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E4%BC%98%E5%8C%96/</link>
      <guid>https://Myongchon.github.io/2019/04/27/%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E4%BC%98%E5%8C%96/</guid>
      <pubDate>Sat, 27 Apr 2019 11:46:29 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;##1. 常用命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
        
      
      </description>
      
      <content:encoded><![CDATA[<p>##1. 常用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//Hexo的命令极简单，安装后只需要记住四个常用的即可。执行命令需要Git当前处于blog文件夹根目录下。</span><br><span class="line">generate 生成静态文件。</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">//server 启动服务器。</span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">//deploy 部署网站。部署网站前，需要预先生成静态文件。</span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line">//clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">//卸载Hexo</span><br><span class="line">npm uninstall hexo-cli -g</span><br></pre></td></tr></table></figure></p><p>2.更换主题,以Next主题为例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p><p>修改Hexo 站点目录下的_config.yml的主题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure></p><p>3.站点初始设置（使用sublime打开save with encoding UTF-8）</p><h1 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo #网站标题</span><br><span class="line">subtitle: #网站副标题</span><br><span class="line">description: #网站描述</span><br><span class="line">author: author #您的名字</span><br><span class="line">language: zh-Hans #网站使用的语言(不写会导致中文乱码，或者使用sublime text编辑自动转码)</span><br><span class="line">timezone: Asia/Shanghai #网站时区。Hexo 默认使用您电脑的时区。</span><br></pre></td></tr></table></figure><p>打开Hexo 站点目录下的_config.yml修改内容如下</p><h4 id="4-设置主题风格"><a href="#4-设置主题风格" class="headerlink" title="4.设置主题风格"></a>4.设置主题风格</h4><ul><li>打开<code>themes/next</code>下的<code>_config.yml</code>文件，搜索 <code>scheme</code>关键字，将你需用启用的<code>scheme</code> 前面注释 # 去除即可。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line">#scheme: Muse # 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class="line">#scheme: Mist # Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class="line">scheme: Pisces # 双栏 Scheme，小家碧玉似的清新</span><br><span class="line">#scheme: Gemini # 类似 Pisces</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/04/27/%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E4%BC%98%E5%8C%96/#disqus_thread</comments>
    </item>
    
    <item>
      <title>编码与解码</title>
      <link>https://Myongchon.github.io/2019/04/12/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</link>
      <guid>https://Myongchon.github.io/2019/04/12/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</guid>
      <pubDate>Fri, 12 Apr 2019 10:05:26 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;strong&gt;编码函数：escape,encodeURI,encodeURIComponent&lt;br&gt;解码函数：unescape,decodeURI,decodeURIComponent&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;##实例&lt;/p&gt;
&lt;h4 id=&quot;1、escape&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<p><strong>编码函数：escape,encodeURI,encodeURIComponent<br>解码函数：unescape,decodeURI,decodeURIComponent</strong></p><p>##实例</p><h4 id="1、escape"><a href="#1、escape" class="headerlink" title="1、escape()"></a>1、escape()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  document.write(escape(&quot;Visit W3School!&quot;) + &quot;&lt;br /&gt;&quot;)</span><br><span class="line">  document.write(escape(&quot;?!=()#%&amp;&quot;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出结果：</span><br><span class="line">Visit%20W3School%21</span><br><span class="line">%3F%21%3D%28%29%23%25%26</span><br></pre></td></tr></table></figure><h4 id="2、encodeURI"><a href="#2、encodeURI" class="headerlink" title="2、encodeURI()"></a>2、encodeURI()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">document.write(encodeURI(&quot;http://www.w3school.com.cn&quot;)+ &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(encodeURI(&quot;http://www.w3school.com.cn/My first/&quot;)+ &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(encodeURI(&quot;,/?:@&amp;=+$#&quot;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">输出结果：</span><br><span class="line">http://www.w3school.com.cn</span><br><span class="line">http://www.w3school.com.cn/My%20first/</span><br><span class="line">,/?:@&amp;=+$#</span><br><span class="line">对整个URL进行编码，而URL的特定标识符不会被转码。</span><br></pre></td></tr></table></figure><h4 id="3、encodeURIComponent"><a href="#3、encodeURIComponent" class="headerlink" title="3、encodeURIComponent()"></a>3、encodeURIComponent()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">document.write(encodeURIComponent(&quot;http://www.w3school.com.cn&quot;))</span><br><span class="line">document.write(&quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(encodeURIComponent(&quot;http://www.w3school.com.cn/p 1/&quot;))</span><br><span class="line">document.write(&quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(encodeURIComponent(&quot;,/?:@&amp;=+$#&quot;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出结果：</span><br><span class="line">http%3A%2F%2Fwww.w3school.com.cn</span><br><span class="line">http%3A%2F%2Fwww.w3school.com.cn%2Fp%201%2F</span><br><span class="line">%2C%2F%3F%3A%40%26%3D%2B%24%23</span><br><span class="line">对URL中的参数进行编码，因为参数也是一个URL，如果不编码会影响整个URL的跳转。</span><br></pre></td></tr></table></figure><h4 id="4、unescape"><a href="#4、unescape" class="headerlink" title="4、unescape()"></a>4、unescape()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var test1=&quot;Visit W3School!&quot;</span><br><span class="line">test1=escape(test1)</span><br><span class="line">document.write (test1 + &quot;&lt;br /&gt;&quot;)</span><br><span class="line">test1=unescape(test1)</span><br><span class="line">document.write(test1 + &quot;&lt;br /&gt;&quot;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出：</span><br><span class="line">Visit%20W3School%21</span><br><span class="line">Visit W3School!</span><br></pre></td></tr></table></figure><p>###5、decodeURI()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var test1=&quot;http://www.w3school.com.cn/My first/&quot;</span><br><span class="line">document.write(encodeURI(test1)+ &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(decodeURI(test1))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出：</span><br><span class="line">http://www.w3school.com.cn/My%20first/</span><br><span class="line">http://www.w3school.com.cn/My first/</span><br></pre></td></tr></table></figure></p><p>###5、decodeURIComponent()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var test1=&quot;http://www.w3school.com.cn/My first/&quot;</span><br><span class="line">document.write(encodeURIComponent(test1)+ &quot;&lt;br /&gt;&quot;)</span><br><span class="line">document.write(decodeURIComponent(test1))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">输出：</span><br><span class="line">http%3A%2F%2Fwww.w3school.com.cn%2FMy%20first%2F</span><br><span class="line">http://www.w3school.com.cn/My first/</span><br></pre></td></tr></table></figure></p><p><strong>参考：<a href="https://www.cnblogs.com/luckyuns/p/6396701.html" target="_blank" rel="noopener">js 中编码（encode）和解码（decode）的三种方法</a></strong></p><hr><p>escape()除了 ASCII 字母、数字和特定的符号外，对传进来的字符串全部进行转义编码，因此如果想对URL编码，最好不要使用此方法。而encodeURI() 用于编码整个URI,因为URI中的合法字符都不会被编码转换。encodeURIComponent方法在编码单个URIComponent（指请求参数）应当是最常用的，它可以讲参数中的中文、特殊字符进行转义，而不会影响整个URL。</p><blockquote><p>1、传递参数时需要使用encodeURIComponent，这样组合的url才不会被#等特殊字符截断。<br>例如：<script language="javascript">document.write(‘&lt;a href=”<a href="http://passport.baidu.com/?logout&amp;aid=7&amp;u=&#39;+encodeURIComponent(">http://passport.baidu.com/?logout&amp;aid=7&amp;u=’+encodeURIComponent(</a>“<a href="http://cang.baidu.com/bruce42">http://cang.baidu.com/bruce42</a>“)+’”&gt;退出</a>‘);</script></p></blockquote><blockquote><p>2、进行url跳转时可以整体使用encodeURI<br>例如：Location.href=encodeURI(“<a href="http://cang.baidu.com/do/s?word=" target="_blank" rel="noopener">http://cang.baidu.com/do/s?word=</a>百度&amp;ct=21”);</p></blockquote><blockquote><p>3、 js使用数据时可以使用escape<br>例如：搜藏中history纪录。</p></blockquote><blockquote><p>4、escape对0-255以外的unicode值进行编码时输出%u<em>**</em>格式，其它情况下escape，encodeURI，encodeURIComponent编码结果相同。<br>最多使用的应为encodeURIComponent，它是将中文、韩文等特殊字符转换成utf-8格式的url编码，所以如果给后台传递参数需要使用encodeURIComponent时需要后台解码对utf-8支持（form中的编码方式和当前页面编码方式相同）<br>escape不编码字符有69个：<em>，+，-，.，/，@，_，0-9，a-z，A-Z<br>encodeURI不编码字符有82个：!，#，$，&amp;，’，(，)，</em>，+，,，-，.，/，:，;，=，?，@，<em>，~，0-9，a-z，A-Z<br>encodeURIComponent不编码字符有71个：!， ‘，(，)，</em>，-，.，*，~，0-9，a-z，A-Z</p></blockquote>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/04/12/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/#disqus_thread</comments>
    </item>
    
    <item>
      <title>href与src的区别</title>
      <link>https://Myongchon.github.io/2019/04/10/href%E4%B8%8Esrc%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <guid>https://Myongchon.github.io/2019/04/10/href%E4%B8%8Esrc%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <pubDate>Wed, 10 Apr 2019 14:25:17 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;###两者的定义&lt;br&gt;href (Hypertext Reference)指定网络资源的位置，从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系。当我们写下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
        
      
      </description>
      
      <content:encoded><![CDATA[<p>###两者的定义<br>href (Hypertext Reference)指定网络资源的位置，从而在当前元素或者当前文档和由当前属性定义的需要的锚点或资源之间定义一个链接或者关系。当我们写下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt; link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; / &gt;</span><br></pre></td></tr></table></figure></p><p>浏览器明白当前资源是一个样式表，页面解析不会暂停（由于浏览器需要样式规则去画或者渲染页面，渲染过程可能会被被暂停）。这与把css文件内容写在<style>标签里不相同，因此建议使用link标签而不是@import来吧样式表导入到html文档里。<br>src (Source)属性仅仅 嵌入当前资源到当前文档元素定义的位置。当浏览器找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>在浏览器下载，编译，执行这个文件之前页面的加载和处理会被暂停。这个过程与把js文件放到<script>标签里类似。这也是建议把JS文件放到底部加载的原因。当然，img标签页与此类似。浏览器暂停加载直到提取和加载图像。</p><p>###两者区别<br>href和src是有区别的，而且是不能相互替换的。<br>(1)我们在可替换的元素*上使用src，然而把href用于在涉及的文档和外部资源之间建立一个链接或者关系。<br>(2)在浏览器下载，编译，执行src的值时，之前页面的加载和处理会被暂停；浏览器遇到href的值，页面解析不会暂停。</p><p>注，可替换元素：</p><blockquote><p>CSS 里，可替换元素（replaced element）的展现不是由CSS来控制的。这些元素是一类外观渲染独立于CSS的 外部对象。 典型的可替换元素有 &lt; img&gt;、 <object>、 <video> 和 表单元素，如<textarea>、 <input> 。 某些元素只在一些特殊情况下表现为可替换元素，例如 <audio> 和 <canvas> 。 通过 CSS content 属性来插入的对象 被称作 匿名可替换元素（anonymous replaced elements）。</p></blockquote></style></p>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/04/10/href%E4%B8%8Esrc%E7%9A%84%E5%8C%BA%E5%88%AB/#disqus_thread</comments>
    </item>
    
    <item>
      <title>跨域请求</title>
      <link>https://Myongchon.github.io/2019/04/07/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</link>
      <guid>https://Myongchon.github.io/2019/04/07/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</guid>
      <pubDate>Sun, 07 Apr 2019 09:49:57 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;一、什么是跨域？&lt;br&gt;1.什么是同源策略及其限制内容？&lt;br&gt;同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<p>一、什么是跨域？<br>1.什么是同源策略及其限制内容？<br>同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p>url的组成</p><p>同源策略限制内容有：</p><p>Cookie、LocalStorage、IndexedDB 等存储性内容<br>DOM 节点<br>AJAX 请求发送后，结果被浏览器拦截了</p><p>但是有三个标签是允许跨域加载资源：</p><p><img src="/2019/04/07/跨域请求/XXX"></p><p><link href="XXX"></p><script src="XXX"><p>2.常见跨域场景<br>当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。不同域之间相互请求资源，就算作“跨域”。常见跨域场景如下图所示：</p><p>image</p><p>特别说明两点：<br>第一：如果是协议和端口造成的跨域问题“前台”是无能为力的。<br>第二：在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议, 域名和端口必须匹配”。<br>这里你或许有个疑问：请求跨域了，那么请求到底发出去没有？<br>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p></script>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/04/07/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/#disqus_thread</comments>
    </item>
    
    <item>
      <title>用ES6定义一个react组件</title>
      <link>https://Myongchon.github.io/2019/04/06/%E7%94%A8es6%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AAreact%E7%BB%84%E4%BB%B6/</link>
      <guid>https://Myongchon.github.io/2019/04/06/%E7%94%A8es6%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AAreact%E7%BB%84%E4%BB%B6/</guid>
      <pubDate>Sat, 06 Apr 2019 10:00:08 GMT</pubDate>
      <description>
      
        
        
          &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
        
      
      </description>
      
      <content:encoded><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/react/16.4.0/umd/react.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/react-dom/16.4.0/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/babel-standalone/6.26.0/babel.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">            &lt;p&gt;姓名: &lt;/p&gt;</span><br><span class="line">            &lt;p&gt;年龄: &lt;/p&gt;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">    /**</span><br><span class="line">        * es6使用class的形式来创建组件,继承React的Component类,</span><br><span class="line">        * 后面我们更多的使用这种方式来创建组件</span><br><span class="line">     */ </span><br><span class="line">    class Welcome extends React.Component &#123;</span><br><span class="line">        constructor(props) &#123;</span><br><span class="line">            super(props);</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">            return (</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;p&gt;姓名: &#123;this.props.person.name&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;p&gt;年龄: &#123;this.props.person.age&#125; &lt;/p&gt;</span><br><span class="line">                &lt;/h1&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const person = &#123;</span><br><span class="line">        name: &apos;huruqing&apos;,</span><br><span class="line">        age: 108</span><br><span class="line">    &#125;</span><br><span class="line">    ReactDOM.render(</span><br><span class="line">        &lt;Welcome person=&#123;person&#125; /&gt;,</span><br><span class="line">        document.getElementById(&apos;root&apos;)</span><br><span class="line">    )</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/04/06/%E7%94%A8es6%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AAreact%E7%BB%84%E4%BB%B6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>根据不同的环境打包（npm run build -- xx)</title>
      <link>https://Myongchon.github.io/2019/04/04/webpack%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85/</link>
      <guid>https://Myongchon.github.io/2019/04/04/webpack%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85/</guid>
      <pubDate>Thu, 04 Apr 2019 03:30:04 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;1&amp;gt; build.js 文件添加&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td c
        
      
      </description>
      
      <content:encoded><![CDATA[<p>1&gt; build.js 文件添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.env.NODE_ENV = process.argv.splice(2)[0] == &apos;dev&apos;? &apos;develop&apos;:&apos;production&apos;</span><br></pre></td></tr></table></figure></p><p>2&gt; prod.env.js &amp; dev.env.jd 文件添加在生产或开发环境需要添加的变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP_DEBUGGER: true,</span><br><span class="line">DROP_CONSOLE: true</span><br></pre></td></tr></table></figure></p><p>3&gt; webpack.prod.conf.js 中添加判断 &amp; 配置参数<br>(1)</p><pre><code>let env = require(&apos;../config/prod.env&apos;) if (process.env.NODE_ENV == &apos;develop&apos;) {    env = require(&apos;../config/dev.env&apos;) } console.log(&quot;----&quot;); console.log(env.DROP_CONSOLE); //让打包的时候输出可配置的文件 var GenerateAssetPlugin = require(&apos;generate-asset-webpack-plugin&apos;);  var createServerConfig=function(compilation){     //  console.log(&quot;info from GenerateAssetPlugin:&quot;);     //  console.log(compilation);     let cfgJson={ApiUrl:&quot;http://10.0.0.200:18080&quot;};     return JSON.stringify(cfgJson); } new UglifyJsPlugin({    uglifyOptions: {      compress: {        warnings: false,        drop_debugger: env.DROP_DEBUGGER,        drop_console: env.DROP_CONSOLE      }   },   sourceMap: config.build.productionSourceMap,   parallel: true}),</code></pre>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/04/04/webpack%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85/#disqus_thread</comments>
    </item>
    
    <item>
      <title>浏览器缓存</title>
      <link>https://Myongchon.github.io/2019/03/31/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</link>
      <guid>https://Myongchon.github.io/2019/03/31/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/</guid>
      <pubDate>Sun, 31 Mar 2019 13:49:54 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;####Cookie&lt;br&gt;1.来源&lt;br&gt;Cookie 在计算机中是个存储在浏览器目录中的文本文件，当浏览器运行时，存储在 RAM 中发挥作用 （此种 Cookies 称作 Session Cookies），一旦用户从该网站或服务器退出，Cookie 可存储在用户本地的硬
        
      
      </description>
      
      <content:encoded><![CDATA[<p>####Cookie<br>1.来源<br>Cookie 在计算机中是个存储在浏览器目录中的文本文件，当浏览器运行时，存储在 RAM 中发挥作用 （此种 Cookies 称作 Session Cookies），一旦用户从该网站或服务器退出，Cookie 可存储在用户本地的硬盘上 （此种 Cookies 称作 Persistent Cookies）。<br>Cookie时效性：目前有些 Cookie 是临时的，有些则是持续的。临时的 Cookie 只在浏览器上保存一段规定的时间，一旦超过规定的时间，该 Cookie 就会被系统清除。<br>Cookie使用限制：Cookie 必须在 HTML 文件的内容输出之前设置；不同的浏览器 (Netscape Navigator、Internet Explorer) 对 Cookie 的处理不一致，使用时一定要考虑；客户端用户如果设置禁止 Cookie，则 Cookie 不能建立。 并且在客户端，一个浏览器能创建的 Cookie 数量最多为 300 个，并且每个不能超过 4KB，每个 Web 站点能设置的 Cookie 总数不能超过 20 个。<br><img src="https://upload-images.jianshu.io/upload_images/16749538-8019d1f17bf73238.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="执行流程"><br>1客户端会发送一个http请求到服务器端。<br>2服务器端接受客户端请求后，发送一个http响应到客户端，这个响应头，其中就包含Set-Cookie头部。<br>3在客户端发起的第二次请求（注意：如果服务器需要我们带上Cookie，我们就需要在B步骤上面拿到这个Cookie然后作为请求头一起发起第二次请求），提供给了服务器端可以用来唯一标识客户端身份的信息。这时，服务器端也就可以判断客户端是否启用了cookies。</p><p>##2.Session<br>Session是对于服务端来说的，客户端是没有Session一说的。Session是服务器在和客户端建立连接时添加客户端连接标志，最终会在服务器软件（Apache、Tomcat、JBoss）转化为一个临时Cookie发送给给客户端，当客户端第一请求时服务器会检查是否携带了这个Session（临时Cookie），如果没有则会添加Session，如果有就拿出这个Session来做相关操作。<br>由于cookie 是存在用户端，而且它本身存储的尺寸大小也有限，最关键是用户可以是可见的，并可以随意的修改，很不安全。那如何又要安全，又可以方便的全局读取信息呢？于是，这个时候，一种新的存储会话机制：session 诞生了。<br>Session 就是在一次会话中解决2次HTTP的请求的关联，让它们产生联系，让2两个页面都能读取到找个这个全局的session信息。session信息存在于服务器端，所以也就很好的解决了安全问题。</p><p>##3.Token<br>token是用户身份的验证方式，我们通常叫它：令牌。最简单的token组成:uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign(签名，由token的前几位+盐以哈希算法压缩成一定长的十六进制字符串，可以防止恶意第三方拼接token请求服务器)。还可以把不变的参数也放进token，避免多次查库。</p><p><em>Cookie和Session的区别:</em><br>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。<br>2、cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗,考虑到安全应当使用session。<br>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能,考虑到减轻服务器性能方面，应当使用cookie。<br>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/03/31/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://Myongchon.github.io/2019/03/31/hello-world/</link>
      <guid>https://Myongchon.github.io/2019/03/31/hello-world/</guid>
      <pubDate>Sun, 31 Mar 2019 11:41:03 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content:encoded>
      
      <comments>https://Myongchon.github.io/2019/03/31/hello-world/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
